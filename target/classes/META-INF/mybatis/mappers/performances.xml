<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sample.dao.PerformanceDao">

	<resultMap type="PerformanceDetailDto" id="PerformanceDetailDtoResultMap">
		<id column="id" property="id"/>
		<result column="title" property="title"/>
		<result column="category" property="category"/>
		<result column="provider" property="provider"/>
		<result column="rating" property="rating"/>
		<result column="runningTime" property="runningTime"/>
		<result column="startDate" property="startDate"/>
		<result column="endDate" property="endDate"/>
		<result column="point" property="point"/>
		
		<result column="imagePath" property="imagePath"/>
		<result column="explain" property="explain"/>
		<result column="hallName" property="hallName"/>
		<result column="hallAddress" property="hallAddress"/>	
		
		<collection property="genres" select="getGenreById" column="id" ofType="string"/>
		<collection property="seatPrices" select="getPerformanceSeatPrice" column="id" ofType="PerformanceSeatPrice"/>
		<collection property="likes" select="getLikesByPerformanceInfoId" column="id" ofType="int" />
		<collection property="reserveCount" select="getReserveCountByPerformanceInfoId" column="id" ofType="int" />
	</resultMap>

	<select id="searchPerformance" parameterType="map" resultMap="PerformanceDetailDtoResultMap">
		SELECT 
			distinct A.id 		as id, 
					A.title		as title, 
					A.category	as category, 
					A.provider	as provider,  
					A.rating	as rating, 
					A.runningTime	as runningTime, 
					A.startDate		as startDate, 
					A.endDate		as endDate, 
					A.point			as point, 
					A.likes			as likes, 
					A.imagePath		as imagePath, 
					A.`explain`		as `explain`, 
					C.name			as hallName, 
					C.address		as hallAddress,	
					A.reserveCount  as reserveCount	
		FROM 
			performance_info A		
		<if test="admin == null">
		JOIN
			performance_main B ON B.infoId = A.id		
		</if>
		JOIN 
			hall_info_main C ON C.id =A.hallInfoId
		JOIN 
			performance_genre D ON A.id = D.id	
		WHERE 
			A.category=	#{category}
		<if test="title != null">
			and A.title like concat('%', #{title}, '%') 
		</if>
		<if test="genres != null">
			and D.genre IN 
			<foreach collection="genres" index="index" item="genre" open="(" separator="," close=")">
				#{genre}
			</foreach>
		</if>
		<if test="startDate != null">
			and A.startDate > #{startDate}
		</if>
		<if test="endDate != null">
			and #{endDate} > A.endDate
		</if>
			and endDate >= CURDATE()		
		<if test="age != null">
			and A.rating = #{age}
		</if>
		ORDER BY 
			<choose>
				<when test="listOrder == 'dateOrder'">
					A.startDate	asc	
				</when>
				<when test="listOrder == 'likeOrder'">
					A.likes desc, 
					A.startDate	asc	
				</when>
				<when test="listOrder == 'salesOrder'">
					A.reserveCount desc,
					A.startDate	asc	
				</when>
				<otherwise>
					A.startDate	asc	
				</otherwise>
			</choose>			
	</select>
		
	<select id="searchPerformanceByPage" parameterType="map" resultMap="PerformanceDetailDtoResultMap">
		SELECT 
			distinct A.id 		as id, 
					A.title		as title, 
					A.category	as category, 
					A.provider	as provider,  
					A.rating	as rating, 
					A.runningTime	as runningTime, 
					A.startDate		as startDate, 
					A.endDate		as endDate, 
					A.point			as point, 
					A.likes			as likes, 
					A.imagePath		as imagePath, 
					A.`explain`		as `explain`, 
					C.name			as hallName, 
					C.address		as hallAddress,
					A.reserveCount  as reserveCount						
		FROM 
			performance_info A		
		<if test="admin == null">
		JOIN
			performance_main B ON B.infoId = A.id		
		</if>
		JOIN 
			hall_info_main C ON C.id = A.hallInfoId
		JOIN 
			performance_genre D ON A.id = D.id	
		WHERE 
			A.category=	#{category}
		<if test="title != null">
			and A.title like concat('%', #{title}, '%') 
		</if>
		<if test="genres != null">
			and D.genre IN 
			<foreach collection="genres" index="index" item="genre" open="(" separator="," close=")">
				#{genre}
			</foreach>
		</if>
		<if test="startDate != null">
			and A.startDate > #{startDate}
		</if>
		<if test="endDate != null">
			and #{endDate} > A.endDate
		</if>			
			and A.endDate >= CURDATE()
		<if test="age != null">
			and A.rating = #{age}
		</if>
		ORDER BY 
			<choose>
				<when test="listOrder == 'dateOrder'">
					A.startDate	asc	
				</when>
				<when test="listOrder == 'likeOrder'">
					A.likes desc, 
					A.startDate	asc	
				</when>
				<when test="listOrder == 'salesOrder'">
					A.reserveCount desc,
					A.startDate	asc	
				</when>
				<otherwise>
					A.startDate	asc	
				</otherwise>
			</choose>			
		LIMIT 
			#{endIndex} OFFSET #{beginIndex}	
		
	</select>
	
	
	<select id="getTotalRowsOfPerformance" parameterType="map" resultType="int">
		SELECT COUNT(*) AS cnt 
		FROM (
			SELECT 
				distinct A.id 		as id, 
						A.title		as title, 
						A.category	as category, 
						A.provider	as provider,  
						A.rating	as rating, 
						A.runningTime	as runningTime, 
						A.startDate		as startDate, 
						A.endDate		as endDate, 
						A.point			as point, 
						A.likes			as likes, 
						A.imagePath		as imagePath, 
						A.`explain`		as `explain`, 
						C.name			as hallName, 
						C.address		as hallAddress,
						A.reserveCount  as reserveCount						
			FROM 
				performance_info A		
			<if test="admin == null">
			JOIN
				performance_main B ON B.infoId = A.id		
			</if>
			JOIN 
				hall_info_main C ON C.id =A.hallInfoId
			JOIN 
				performance_genre D ON A.id = D.id	
			WHERE 
				A.category=	#{category}
			<if test="title != null">
				and A.title like concat('%', #{title}, '%') 
			</if>
			<if test="genres != null">
				and D.genre IN 
				<foreach collection="genres" index="index" item="genre" open="(" separator="," close=")">
					#{genre}
				</foreach>
			</if>
			<if test="startDate != null">
				and A.startDate > #{startDate}
			</if>
			<if test="endDate != null">
				and #{endDate} > A.endDate
			</if>		
				and A.endDate >= CURDATE()	
			<if test="age != null">
				and A.rating = #{age}
			</if>
			ORDER BY 
				A.startDate	
		) F
	</select>
	
	<select id="totalSearchPerformanceByPage" parameterType="map" resultMap="PerformanceDetailDtoResultMap">
		SELECT 
			distinct A.id 		as id, 
					A.title		as title, 
					A.category	as category, 
					A.provider	as provider,  
					A.rating	as rating, 
					A.runningTime	as runningTime, 
					A.startDate		as startDate, 
					A.endDate		as endDate, 
					A.point			as point, 
					A.likes			as likes, 
					A.imagePath		as imagePath, 
					A.`explain`		as `explain`, 
					C.name			as hallName, 
					C.address		as hallAddress,
					A.reserveCount  as reserveCount						
		FROM 
			performance_info A		
		JOIN
			performance_main B ON B.infoId = A.id
		JOIN 
			hall_info_main C ON C.id = A.hallInfoId
		JOIN 
			performance_genre D ON A.id = D.id	
		WHERE 
			A.title like CONCAT('%', #{title}, '%') 
		AND
			endDate >= CURDATE()
		ORDER BY 
			<choose>
				<when test="listOrder == 'dateOrder'">
					A.startDate	asc	
				</when>
				<when test="listOrder == 'likeOrder'">
					A.likes desc, 
					A.startDate	asc	
				</when>
				<when test="listOrder == 'salesOrder'">
					A.reserveCount desc,
					A.startDate	asc	
				</when>
				<otherwise>
					A.startDate	asc	
				</otherwise>
			</choose>		
		LIMIT 
			#{endIndex} OFFSET #{beginIndex}	
	</select>
	
	<select id="getTotalRowsOfPerformanceForTotalSearch" parameterType="map" resultType="int">
		SELECT COUNT(*) AS cnt 
		FROM (
			SELECT 
				distinct A.id 		as id, 
						A.title		as title, 
						A.category	as category, 
						A.provider	as provider,  
						A.rating	as rating, 
						A.runningTime	as runningTime, 
						A.startDate		as startDate, 
						A.endDate		as endDate, 
						A.point			as point, 
						A.likes			as likes, 
						A.imagePath		as imagePath, 
						A.`explain`		as `explain`, 
						C.name			as hallName, 
						C.address		as hallAddress,
						A.reserveCount  as reserveCount						
			FROM 
				performance_info A	
			JOIN
				performance_main B ON B.infoId = A.id	
			JOIN 
				hall_info_main C ON C.id =A.hallInfoId
			JOIN 
				performance_genre D ON A.id = D.id	
			WHERE 
				A.title like CONCAT('%', #{title}, '%') 
			AND
				endDate >= CURDATE()
			ORDER BY 
				A.startDate	
		) F
	
	</select>
	
	
	<select id="getScheduleByPerformanceMainId" parameterType="int" resultType="PerformanceSchedule">
		SELECT id, infoId, showDate, showTime, showNumber 
		FROM performance_main
		WHERE id = #{ performanceMainId}
	</select>	

	<select id="getPerformanceSeatPrice" parameterType="int"
		resultType="PerformanceSeatPrice">
		select
			infoId,
			seatRate,
			price
		from
			performance_seat_price
		where
			infoId = #{value}
	</select>

	<select id="selectPerformance" parameterType="int" resultType="PerformanceDto">
		SELECT distinct
			A.id 		as performanceId,
			A.title,
			A.category,
			A.startDate,
			A.endDate,
			A.rating,
			A.runningTime,
			A.provider,
			A.point,
			A.likes,
			A.imagePath,
			A.`explain`,
			C.id 		as "hallinfo.id",
			C.name 		as "hallinfo.name",
			C.address 	as "hallinfo.address"
		from
			performance_info A
		join
			performance_main B
		on
			A.id = B.infoId
		join
			hall_info_main C
		on
			B.hallId = C.id
		where
			A.id = #{value}
	</select>
			
	<select id="getGenreById" parameterType="int" resultType="string">
		SELECT  
			genre
		FROM 
			performance_genre
		WHERE 
			id = #{value}
	</select>
	
	<select id="getGenreByCategory" parameterType="string" resultType="string">
		SELECT 
			name
		FROM 
			genres
		WHERE category= #{value}	
	</select>
	
	<select id="getLikesByPerformanceInfoId" parameterType="int" resultType="int">
		SELECT 
			COUNT(*) AS likes
		FROM 
			user_likes
		WHERE 
			infoid=#{value}
	</select>
	
	<select id="getReserveCountByPerformanceInfoId" parameterType="int" resultType="int">
		SELECT 
			COUNT(*) AS reserveCount
		FROM 
			reserve_main A
		JOIN 
			performance_main B ON A.performanceId = B.id 
		WHERE 
			B.infoId = #{value}
		GROUP BY 
			B.infoId
	</select>
	
	
	<select id="getAllHallInfos" resultType="HallInfo">
		SELECT 
			id 			as id, 
			`name` 		as `name`, 
			address 	as address, 
			gpsX		as gpsX, 
			gpsY		as gpsY
		FROM 
			hall_info_main
		ORDER BY
			id	
	</select>
	
	<select id="getHallInfoById" parameterType="int" resultType="HallInfo">
		SELECT 
			id 			as id, 
			`name` 		as `name`, 
			address 	as address, 
			gpsX		as gpsX, 
			gpsY		as gpsY
		FROM 
			hall_info_main
		WHERE 
			id = #{value}
	
	</select>
	
	<select id="selectPerformanceByIdAndDate" parameterType="map" resultType="PerformanceSchedule">
	 	SELECT
			id,
			infoId,
			hallId 		as "hallinfo.id",
			showDate,
			showTime,
			showNumber
		FROM
			performance_main
		WHERE
			infoId = #{no}
		AND
			showDate = #{date}
	 </select>

	
	<select id="getPerformancesByCategory" parameterType="string" resultMap="PerformanceDetailDtoResultMap">
		SELECT 
			distinct A.id 		as id, 
					A.title		as title, 
					A.category	as category, 
					A.provider	as provider,  
					A.rating	as rating, 
					A.runningTime	as runningTime, 
					A.startDate		as startDate, 
					A.endDate		as endDate, 
					A.point			as point, 
					A.likes			as likes, 
					A.imagePath		as imagePath, 
					A.`explain`		as `explain`, 
					C.name			as hallName, 
					C.address		as hallAddress,
					A.reserveCount  as reserveCount						
		FROM 
			performance_info A		
		JOIN
			performance_main B ON B.infoId = A.id
		JOIN 
			hall_info_main C ON C.id = A.hallInfoId
		WHERE 
			A.category=	#{value}
		AND 
			A.endDate >= CURDATE()
		ORDER BY 
			A.startDate		
	</select>

	<select id="getPerformanceById" parameterType="int" resultMap="PerformanceDetailDtoResultMap">
		SELECT 
			distinct A.id 		as id, 
					A.title		as title, 
					A.category	as category, 
					A.provider	as provider,  
					A.rating	as rating, 
					A.runningTime	as runningTime, 
					A.startDate		as startDate, 
					A.endDate		as endDate, 
					A.point			as point, 
					A.likes			as likes, 
					A.imagePath		as imagePath, 
					A.`explain`		as `explain`, 
					C.name			as hallName, 
					C.address		as hallAddress,
					A.reserveCount  as reserveCount						
		FROM 
			performance_info A					
		JOIN 
			hall_info_main C ON C.id = A.hallInfoId
		WHERE 
			A.id=	#{value}
		ORDER BY 
			A.id	
	</select>
	
	<select id="getPerformanceSeatPriceByPerformanceInfoAndSeatRate"
		parameterType="PerformanceSeatPrice" resultType="PerformanceSeatPrice">
		SELECT 
			infoId, seatRate, price
		FROM 
			performance_seat_price
		WHERE 
			infoid= #{infoId}
		AND 
			seatRate LIKE #{seatRate}
	
	</select>
	
	<select id="getUserLikesByUserIdAndPerformanceInfoId" parameterType="UserLikes" resultType="UserLikes">
		SELECT 
			id, infoId
		FROM 
			user_likes
		WHERE 
			id LIKE #{id}
		AND 
			infoId = #{performanceInfoId}
		
	</select>
	
	<select id="getGenderReserveCountByPerformanceInfoIdAndGender" parameterType="PerformanceGenderReserveStats"
		resultType="int">				
		SELECT COUNT(*) AS reserveCount
		FROM (
			SELECT 
				A.reserveUser, B.infoId, C.gender
			FROM 
				reserve_main A
			JOIN 
				performance_main B ON A.performanceId = B.id 
			JOIN
				user_main C ON A.reserveUser = C.id
			JOIN
				performance_info D ON B.infoId = D.id
			WHERE 
				D.id = #{performanceInfoId}
			AND 
				C.gender LIKE #{gender}
		) F
	</select>
	
	<select id="getAgeGroupReserveCountByPerformanceInfoIdAndAge" parameterType="PerformanceAgeReserveStats"
	resultType="int">
		
		SELECT COUNT(*) AS reserveCount
		FROM (
			SELECT A.reserveUser, B.infoId, C.gender, C.birthday,
				<![CDATA[(YEAR(CURDATE())-YEAR(C.birthday))-(RIGHT(CURDATE(),5) < RIGHT(C.birthday,5))]]> AS age
			FROM 
				reserve_main A
			JOIN 
				performance_main B ON A.performanceId = B.id 
			JOIN
				user_main C ON A.reserveUser = C.id
			JOIN 
				performance_info D ON B.infoId = D.id
			WHERE 
				D.id = #{performanceInfoId}
		)F
		WHERE 
			<choose>
				<when test="ageGroup == 10">
					<![CDATA[F.age < 20]]>
				</when>
				<when test="ageGroup == 20">
					F.age between 20 and 29
				</when>
				<when test="ageGroup == 30">
					F.age between 30 and 39
				</when>
				<when test="ageGroup == 40">
					F.age between 40 and 49
				</when>
				<when test="ageGroup == 50">
					<![CDATA[F.age >= 50]]>
				</when>
			</choose>
	</select>
	
	
	<insert id="insertHallInfo" parameterType="HallInfo"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO 
			hall_info_main 
			(`name`, address, gpsX, gpsY)
		VALUES
			(#{name}, #{address}, #{gpsX}, #{gpsY})
		<selectKey resultType="int" order="AFTER" keyProperty="id" >
			select LAST_INSERT_ID() as id
		</selectKey>		
	</insert>
	
	<insert id="insertGenre" parameterType="PerformanceGenre">
		INSERT INTO 
			performance_genre
			(genre, id)
		VALUES
			( #{genre}, #{id})
	</insert>
	
	<insert id="insertPerformanceSeatPrice" parameterType="PerformanceSeatPrice">
		INSERT INTO 
			performance_seat_price
			(infoId, seatRate, price)
		VALUES
			(#{infoId}, #{seatRate}, #{price} )	
	</insert>	
	
	<insert id="insertPerformance" parameterType="Performance"
		useGeneratedKeys="true" keyProperty="id">		
		INSERT INTO 
			performance_info
			(title, category, startDate, endDate, rating, runningTime, provider, 
			imagePath, `explain`, hallInfoId)
		VALUES
			(#{title}, #{category}, #{startDate}, #{endDate}, #{rating}, #{runningTime}, #{provider}, 
			#{imagePath}, #{explain}, #{hallInfoId})
		<selectKey resultType="int" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID() as no	
		</selectKey>		
	</insert>
	
	<insert id="insertPerformanceLikes" parameterType="UserLikes" >
		INSERT INTO 
			user_likes
			(id, infoId)
		VALUES
			(#{id}, #{performanceInfoId})		
	</insert>
	
	<select id="getPerformanceMain" parameterType="int" resultType="PerformanceMain">
		SELECT 
			id, infoId, hallId, showDate, showTime, showNumber
		FROM 
			performance_main
		WHERE 
			infoId = #{value}	
	</select>
	
	<delete id="deletePerformanceGenresByPerformanceInfoId" parameterType="int">
		DELETE FROM performance_genre
		WHERE 
			id= #{value}
	</delete>
	
	<delete id="deletePerformanceSeatPricesbyPerformanceInfoId" parameterType="int">
		DELETE FROM performance_seat_price
		WHERE 
			infoid = #{value}
	</delete>
	
	<delete id="deletePerformanceInfo" parameterType="int">
		DELETE FROM performance_info
		WHERE 
			id = #{value};
	</delete>
	
	<delete id="deletePerformanceLikes" parameterType="UserLikes">
		DELETE FROM user_likes
		WHERE
			id LIKE #{id}
		AND
			infoId = #{performanceInfoId}
	</delete>
	
	<update id="updatePerformanceInfo" parameterType="Performance">
	UPDATE 
		performance_info
	SET 
		category = #{category},
		title = #{title},
		startDate = #{startDate},
		endDate= #{endDate},
		rating= #{rating},
		runningTime = #{runningTime}, 
		provider = #{provider},
		imagePath = #{imagePath},
		`explain` = #{explain}
	WHERE 
		id = #{id}
		
	</update>
	
	<update id="updatePerformanceHallInfoId" parameterType="Performance">
	UPDATE performance_info
	SET 
		hallInfoId = #{hallInfo.id}
	WHERE 
		id= #{id}
	
	</update>
	
	<update id="updatePerformanceLikes" parameterType="Performance">
		UPDATE performance_info
		SET
			likes = #{likes}
		WHERE
			id = #{id}	
	</update>
	
	<update id="updatePerformanceReserveCount" parameterType="Performance">
		UPDATE performance_info
		SET
			reserveCount = #{reserveCount}
		WHERE
			id = #{id}
	
	</update>
	
	<select id="getHallInfoByPerformanceInfoId" parameterType="int" resultType="HallInfo">
		SELECT 
			A.id , A.`name`, A.address, A.gpsX, A.gpsY
		FROM 
			hall_info_main A
		JOIN 
			performance_info B ON A.id = B.hallInfoId
		WHERE 
			B.id=#{value}	
	</select>
	
	
	
	<select id="getPerformanceByPerformanceMainId" parameterType="int" resultMap="PerformanceDetailDtoResultMap">
	SELECT 
			distinct A.id 		as id, 
					A.title		as title, 
					A.category	as category, 
					A.provider	as provider,  
					A.rating	as rating, 
					A.runningTime	as runningTime, 
					A.startDate		as startDate, 
					A.endDate		as endDate, 
					A.point			as point, 
					A.likes			as likes, 
					A.imagePath		as imagePath, 
					A.`explain`		as `explain`, 
					C.name			as hallName, 
					C.address		as hallAddress,
					A.reserveCount  as reserveCount						
		FROM 
			performance_info A
		JOIN 
			performance_main B ON A.id = B.infoId
		JOIN 
			hall_info_main C ON C.id =B.hallId
		JOIN 
			performance_genre D ON A.id = D.id	
		WHERE 
			B.id = #{value}
	
	</select>

	<resultMap id="performanceDtoByUser"  type="PerformanceDto">
		<result property="performanceId" column="performanceId" />
		<result property="title" column="title" />
		<result property="category" column="category" />
		<result property="startDate" column="startDate" />
		<result property="endDate" column="endDate" />
		<result property="rating" column="rating" />
		<result property="provider" column="provider" />
		<result property="runningTime" column="runningTime" />
		<result property="imagePath" column="imagePath" />
		<result property="explain" column="explain" />
		<association property="hallinfo" javaType="HallInfo">
			<result property="id" column="hallInfoId"/>
			<result property="name" column="name"/>
			<result property="address" column="address"/>
		</association>
	</resultMap>

	<select id="getPerformanceByUserId" parameterType="string" resultMap="performanceDtoByUser">
		select a.id as performanceId, title, category, 
		startDate, endDate, rating, runningTime, provider, imagePath, 
		`explain`, hallInfoId, c.name, c.address
		from performance_info a
		join user_likes b on a.id = b.`infoId`
		left outer join hall_info_main c on a.hallInfoId = c.id 
		where b.id = #{userId}
	</select>

<!--  
	<select id="selectPerformance" parameterType="int" resultType="Performance">
		select
			id,
			title,
			category,
			startDate,
			endDate,
			rating,
			runningTime,
			provider,
			point,
			likes,
			imagePath,
			`explain`
		from
			performance_info A
		join
			performance_main B
		on
			A.id = B.infoId
		join
			hall_info_main C
		on
			B.hallId = C.id
		where
			A.id = #{value}
	</select>
	
	 
-->	
	<select id="getAllPerformances" resultMap="PerformanceDetailDtoResultMap">
		SELECT 
			a.id, 
			title, 
			category, 
			startDate, 
			endDate, 
			rating, 
			runningTime, 
			provider, 
			imagePath,
			`explain`, 
			hallInfoId, 
			c.name 				as hallName, 
			c.address 			as hallAddress
		from performance_info a
		left outer join hall_info_main c on a.hallInfoId = c.id 
		ORDER BY a.id 	
	</select>
	<resultMap type="Performance" id="likes">
		<id column="id" property="id"/>
		<result column="title" property="title"/>
		<result column="category" property="category"/>
		<result column="provider" property="provider"/>
		<result column="runningTime" property="runningTime"/>
		<result column="startDate" property="startDate"/>
		<result column="endDate" property="endDate"/>
		<result column="imagePath" property="imagePath"/>
		<result column="explain" property="explain"/>
		<association property="hallInfo" javaType="HallInfo">
			<result property="name" column="name"/>
		</association>
		<collection property="genre" select="getGenreById" column="id" ofType="string"/>
	</resultMap>
	
	<select id="getLikesList" resultMap="likes">
		select b.id, title, category, 
		date_format(b.startDate, '%Y.%m.%d') as startDate,
		date_format(b.endDate, '%Y.%m.%d') as endDate,
		time_format(b.runningTime, '%H:%i:%S') as runningTime,
		provider, imagePath, `explain`, c.name
		from user_likes a
		join performance_info b on a.infoId = b.id
		join hall_info_main c on b.hallInfoId = c.id
		where a.id = #{userId}
		limit 5 offset #{offset}
	</select>



<!-- performance Main Table insert -->
	<insert id="insertPerformanceSchedule" parameterType="PerformanceSchedule" 
						useGeneratedKeys="true"  keyProperty="id">
			
		INSERT INTO performance_main
		(infoId, hallId, showDate, showTime, showNumber)
		VALUES
		(#{infoId}, #{hallinfo.id}, #{showDate}, #{showTime}, #{showNumber})
	
	 <selectKey resultType="int" order="AFTER" keyProperty="id">
		 SELECT LAST_INSERT_ID() as id
	 </selectKey>
	</insert>

	<select id="getPerformanceMainByPerformanceId" parameterType="int" resultType="PerformanceMain">
		SELECT 
			id,
			infoId,
			hallId,
			showDate,
			showTime,
			showNumber 
		FROM performance_main
		WHERE id = #{value}
	</select>


	<select id="getPerformanceByCategoryLimit" parameterType="string" resultMap="PerformanceDetailDtoResultMap">
		select		A.id 		as id,
					B.id		AS performanceMainId, 
					A.title		as title, 
					A.category	as category, 
					A.provider	as provider,  
					A.rating	as rating, 
					A.runningTime	as runningTime, 
					A.startDate		as startDate, 
					A.endDate		as endDate, 
					A.point			as point, 
					A.likes			as likes, 
					A.imagePath		as imagePath, 
					A.`explain`		as `explain`, 
					C.name			as hallName, 
					C.address		as hallAddress,
					A.reserveCount  as reserveCount,
					A.hallInfoId						
		FROM 
			performance_info A		
		JOIN
			performance_main B ON B.infoId = A.id
		JOIN 
			hall_info_main C ON C.id = A.hallInfoId
		JOIN 
			performance_genre D ON A.id = D.id	
		JOIN 
			mate_main E ON E.performanceId = B.id
		WHERE A.category = #{value}
		AND A.endDate >= CURDATE()
		GROUP BY B.infoId
		ORDER BY B.registeredDate DESC 
		LIMIT 3
	</select>

	<delete id="deletePerformanceMainByPerformanceId" parameterType="int">
		DELETE FROM performance_main where id = #{value}
	</delete>
 
</mapper>